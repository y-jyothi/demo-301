node {
 try  {
 notify('Job Started') 

     
  stage('Git-Checkout') {
   git 'https://github.com/y-jyothi/demo-301.git'
  }
    
 def project_path="01-Jenkins/Code/petclinic"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
  
  
  stage('Sonar Analysis'){
        withSonarQubeEnv('SonarQube'){
         sh 'mvn sonar:sonar'
        }
        }
	stage("Quality Gate") {
                timeout(time: 1, unit: 'HOURS') {
                     waitForQualityGate abortPipeline: true
                }
             
          }

   stage('Maven-Test') {
   sh label: '', script: 'mvn test'
  }
  
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
   stage('Archive-Artifacts') {
   archiveArtifacts 'target/*.war'
  }
  
  stage('Jfrog Artifacory Upload') {
        def server= Artifactory.server 'ARTIFACTORY'
                    def uploadSpec= """{
                        "files": [{
                        "pattern": "target/*.war",
                        "target": "example-repo-local"}]
                    }"""
        server.upload(uploadSpec)
        
        }
  
  stage('Deploy Approval') {
		input "Deploy to test ?"
	}
stage('Docker-Stage-Deployment') {
   sh label: '', script: 'docker-compose up -d --build'
  }
 }


notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}



def notify(status){
    emailext (
	to: "jyothiy@gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}


